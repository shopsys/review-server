version: "3.4"

services:
    traefik:
        image: traefik:2.10
        restart: always
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik.yml:/etc/traefik/traefik.yml
            - ./acme.json:/acme.json
        networks:
            - traefik-network
        labels:
            - traefik.docker.network=github-runner_traefik-network

    chadburn:
        image: premoweb/chadburn:latest
        restart: always
        command: daemon
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            - default

    postgres:
        image: postgres:12.1-alpine
        restart: always
        volumes:
            - ./var/postgres-data:/var/lib/postgresql/data
            - ./docker/postgres/postgres.conf:/var/lib/postgresql/data/postgresql.conf
        environment:
            - PGDATA=/var/lib/postgresql/data/pgdata
            - POSTGRES_USER=root
            - POSTGRES_PASSWORD=root
            - POSTGRES_DB=shopsys
        labels:
            - traefik.enable=false
        command:
            - postgres
            - -c
            - config_file=/var/lib/postgresql/data/postgresql.conf
        networks:
            - default

    redis:
        image: redis:7.0-alpine
        restart: always
        networks:
            - default
        labels:
            - traefik.enable=false

    smtp-server:
        image: ixdotai/smtp:latest
        restart: always
        networks:
            - default
        labels:
            - traefik.enable=false

    elasticsearch:
        build:
            context: .
            dockerfile: docker/elasticsearch/Dockerfile
        restart: always
        ulimits:
            nofile:
                soft: 65536
                hard: 65536
        volumes:
            - elasticsearch-data:/usr/share/elasticsearch/data
        environment:
            - discovery.type=single-node
        labels:
            - traefik.enable=false
        networks:
            - default

    adminer:
        image: adminer:latest
        restart: always
        labels:
            - traefik.backend=adminer
            - traefik.http.routers.adminer.rule=Host(`adminer.odin.shopsys.cloud`)
            - traefik.http.routers.adminer.entrypoints=http,https
            - traefik.http.routers.adminer.tls.certresolver=letsencrypt
            - traefik.http.services.adminer.loadbalancer.server.port=8080
            - traefik.enable=true
        networks:
            - traefik-network
            - default
        environment:
            ADMINER_DEFAULT_SERVER: postgres

    kibana:
        image: docker.elastic.co/kibana/kibana-oss:7.10.2
        restart: always
        labels:
            - traefik.backend=kibana
            - traefik.http.routers.kibana.rule=Host(`kibana.odin.shopsys.cloud`)
            - traefik.http.routers.kibana.entrypoints=http,https
            - traefik.http.routers.kibana.tls.certresolver=letsencrypt
            - traefik.http.services.kibana.loadbalancer.server.port=5601
            - traefik.enable=true
        networks:
            - traefik-network
            - default

    rabbitmq:
        image: rabbitmq:3.12-management-alpine
        restart: always
        labels:
            - traefik.backend=rabbitmq
            - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.odin.shopsys.cloud`)
            - traefik.http.routers.rabbitmq.entrypoints=http,https
            - traefik.http.routers.rabbitmq.tls.certresolver=letsencrypt
            - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
            - traefik.enable=true
        networks:
            - traefik-network
            - default

volumes:
    elasticsearch-data:
        driver: local

networks:
    traefik-network:
        driver: bridge
